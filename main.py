import asyncio
import json
import os
import socket
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiohttp import ClientSession
from dotenv import load_dotenv
from pytz import timezone

from utils.zoom import ZoomClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Zoom –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
PROJECTS = [
    {
        "name": "Vanya",
        "json_file": "rec_history/messages_vanya.json",
        "zoom_account_id": os.getenv("VANYA_ZOOM_ACCOUNT_ID"),
        "zoom_client_id": os.getenv("VANYA_ZOOM_CLIENT_ID"),
        "zoom_client_secret": os.getenv("VANYA_ZOOM_CLIENT_SECRET"),
        "group_chat_id": os.getenv("KVL_GROUP_CHAT_ID"),
        "message_thread_id": os.getenv("MESSAGE_THREAD_ID"),
    },
    {
        "name": "Krauz",
        "json_file": "rec_history/messages_krauz.json",
        "zoom_account_id": os.getenv("KRAUZ_ZOOM_ACCOUNT_ID"),
        "zoom_client_id": os.getenv("KRAUZ_ZOOM_CLIENT_ID"),
        "zoom_client_secret": os.getenv("KRAUZ_ZOOM_CLIENT_SECRET"),
        "group_chat_id": os.getenv("KVL_GROUP_CHAT_ID"),  # –¢–æ—Ç –∂–µ —á–∞—Ç, —á—Ç–æ –∏ —É –í–∞–Ω–∏
        "message_thread_id": os.getenv("MESSAGE_THREAD_ID"),
    },
    {
        "name": "Lera",
        "json_file": "rec_history/messages_lera.json",
        "zoom_account_id": os.getenv("LERA_ZOOM_ACCOUNT_ID"),
        "zoom_client_id": os.getenv("LERA_ZOOM_CLIENT_ID"),
        "zoom_client_secret": os.getenv("LERA_ZOOM_CLIENT_SECRET"),
        "group_chat_id": os.getenv("KVL_GROUP_CHAT_ID"),  # –û—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç
        "message_thread_id": None,  # –£ –õ–µ—Ä—ã –Ω–µ—Ç —Ç–µ–º—ã
    },
    {
        "name": "Misha",
        "json_file": "rec_history/messages_misha.json",
        "zoom_account_id": os.getenv("MISHA_ZOOM_ACCOUNT_ID"),
        "zoom_client_id": os.getenv("MISHA_ZOOM_CLIENT_ID"),
        "zoom_client_secret": os.getenv("MISHA_ZOOM_CLIENT_SECRET"),
        "group_chat_id": os.getenv("KVL_GROUP_CHAT_ID"),
        "message_thread_id": os.getenv("TEST_MESSAGE_THREAD_ID")
    }
]

moscow_tz = timezone('Europe/Moscow')


# –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å
def get_local_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(("8.8.8.8", 80))  # Google DNS
        local_ip = s.getsockname()[0]
    finally:
        s.close()
    return local_ip


local_ip = get_local_ip()
http_port = 8081  # –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å telegram-bot-api
TOKEN = os.environ.get('TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Dispatcher –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ bot –Ω–∞–ø—Ä—è–º—É—é

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async def send_message(chat_id, text):
    url = f"http://{local_ip}:{http_port}/bot{TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    async with ClientSession() as session:
        await session.post(url, json=payload)


def get_message_ids_by_text(chat_id, meeting_topic):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ message_id –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É"""
    user_data = user_states.get(chat_id, {})
    json_file = user_data.get("json_file")
    try:
        print(f"DEBUG: meeting_topic={meeting_topic}, user_data={user_data}, json_file={json_file}")
        with open(json_file, "r", encoding="utf-8") as file:
            data = json.load(file)
            return data.get(meeting_topic, [])
    except (FileNotFoundError, json.JSONDecodeError):
        return []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def format_time(dt):
    return dt.strftime("%d:%m:%Y %H:%M:%S")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏
async def send_recording(chat_id, download_url_with_token, filename):
    if os.path.exists(filename):
        print(f"DEBUG: –§–∞–π–ª {filename} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–æ–≤–∞.")
        with open(filename, 'rb') as f:
            files = {'document': f}
            send_document_url = f"http://{local_ip}:{http_port}/bot{TOKEN}/sendDocument"
            async with ClientSession() as session:
                await session.post(send_document_url, data={"chat_id": chat_id}, files=files)
        await send_message(chat_id, f"–ó–∞–ø–∏—Å—å {filename} —É–∂–µ —Å–∫–∞—á–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–Ω–æ–≤–∞.")
    else:
        async with ClientSession() as session:
            response = await session.get(download_url_with_token)
            print("DEBUG: –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏:", response.status)

            if response.status == 200:
                with open(filename, 'wb') as f:
                    total_size = 0
                    async for chunk in response.content.iter_any():
                        f.write(chunk)
                        total_size += len(chunk)
                    print(f"DEBUG: –†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {filename} - {total_size} –±–∞–π—Ç.")

                with open(filename, 'rb') as f:
                    files = {'document': f}
                    send_document_url = f"http://{local_ip}:{http_port}/bot{TOKEN}/sendDocument"
                    async with ClientSession() as session:
                        await session.post(send_document_url, data={"chat_id": chat_id}, files=files)
                await send_message(chat_id, f"–ó–∞–ø–∏—Å—å {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
            else:
                print(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏.")
                await send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å—å.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message):
    await send_message(message.chat.id,
                       "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è Zoom üëã\n\n–Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –≤–∞—Å –æ—Ç —Ä—É—Ç–∏–Ω—ã –∏ –¥–æ–ª–≥–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–π\n\n–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ö –∑–∞–ø–∏—Å–∏ –≤ –≤–∞—à–∏ —á–∞—Ç—ã üòé\n–ë–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–¥–µ—Ç—Å—è –∂–¥–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–æ–∑–≤–æ–Ω–æ–≤!\n\n–ù–∞–∂–∏–º–∞–π—Ç–µ /recs, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π")


@dp.message(Command("help"))
async def start(message: Message):
    await send_message(message.chat.id,
                       "/start - –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n\n"
                       "/recs - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ —Å–∫–∞—á–∞–Ω—ã - –ø–æ–ø—ã—Ç–∫–∞ –∏—Ö –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —ç—Ç–∏—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –ª–∏–±–æ –∂–µ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ\n\n"
                       "/help - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /recs
@dp.message(Command("recs"))
async def choose_conference(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–∞–Ω—è", callback_data="recs_vanya")],
        [InlineKeyboardButton(text="–ö—Ä–∞—É–∑", callback_data="recs_krauz")],
        [InlineKeyboardButton(text="–õ–µ—Ä–∞", callback_data="recs_lera")],
        [InlineKeyboardButton(text="–ú–∏—à–∞", callback_data="recs_misha")]
    ])
    await message.answer("–ß—å–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("recs_"))
async def recs(callback: CallbackQuery):
    user = callback.data.split("_")[1].capitalize()
    project = next((p for p in PROJECTS if p["name"] == user), None)

    if not project:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return

    client = ZoomClient(
        account_id=project["zoom_account_id"],
        client_id=project["zoom_client_id"],
        client_secret=project["zoom_client_secret"]
    )

    client.access_token = client.get_access_token()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    recs = client.get_recordings(from_date='2023-01-01', to_date=datetime.utcnow().strftime('%Y-%m-%d'))
    print("DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–ø–∏—Å–∏:", recs)

    if recs.get('meetings'):
        user_states[callback.message.chat.id] = {
            'meetings': recs['meetings'],
            'group_chat_id': project["group_chat_id"],
            'message_thread_id': project["message_thread_id"],
            'json_file': project["json_file"]
        }
        message_text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å", callback_data="download")]
        ])

        for index, meeting in enumerate(recs['meetings'], start=1):
            start_time_moscow = datetime.fromisoformat(
                meeting['start_time'].replace("Z", "+00:00")).astimezone(moscow_tz)
            message_text += f"{index}. {format_time(start_time_moscow)} - {meeting['topic']}\n"

        await callback.message.answer(message_text, reply_markup=keyboard)
    else:
        await callback.message.answer("–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n–°–µ–π—á–∞—Å –≤—Å–µ —Å–∫–∞—á–∞—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ ‚è≥")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /download
@dp.callback_query(lambda c: c.data == "download")
async def choose_conference(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    meetings = user_states.get(chat_id, {}).get('meetings', [])
    if not meetings:
        await send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    row = []
    for index, meeting in enumerate(meetings, start=1):
        row.append(InlineKeyboardButton(text=str(index), callback_data=f"send_{index - 1}"))
        if len(row) == 4:
            keyboard.inline_keyboard.append(row)
            row = []
    if row:
        keyboard.inline_keyboard.append(row)

    await callback_query.message.answer("–ó–∞–ø–∏—Å–∏ –∫–∞–∫–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã
async def forward_videos(chat_id, meeting_topic):
    """–ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Ö –≤–∏–¥–µ–æ"""
    user_data = user_states.get(chat_id, {})
    group_chat_id = user_data.get("group_chat_id")
    if not group_chat_id:
        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω group_chat_id.")
        return

    message_ids = get_message_ids_by_text(chat_id, meeting_topic)

    if not message_ids:
        await bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n–°–µ–π—á–∞—Å —Å–∫–∞—á–∞—é ü´°")
        return

    found = False
    for message_id in message_ids:
        try:
            await bot.copy_message(
                chat_id=chat_id,
                from_chat_id=group_chat_id,
                message_id=message_id
            )
            found = True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
    if found:
        await bot.send_message(chat_id, "–ó–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∑–∞–ø–∏—Å–µ–π
@dp.callback_query(lambda c: c.data.startswith("send_"))
async def send_records(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    meetings = user_states.get(chat_id, {}).get('meetings', [])
    index = int(callback_query.data.split('_')[1])
    if index >= len(meetings):
        await send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.")
        return

    meeting = meetings[index]
    start_time_moscow = datetime.fromisoformat(meeting['start_time'].replace("Z", "+00:00")) + timedelta(hours=3)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–º—É –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–∞—Ç–∞ –≤—Ä–µ–º—è - Zoom Meeting –¢–µ–º–∞"
    meeting_topic = f"{format_time(start_time_moscow)} - {meeting['topic']}"

    await forward_videos(chat_id, meeting_topic)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–ø—Ä–æ—Å–æ–º
async def main():
    await dp.start_polling(bot)  # –ü–µ—Ä–µ–¥–∞–µ–º bot –≤ start_polling


if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
